{"version":3,"sources":["initialPush.js"],"names":["childProcess","require","fs","path","repoMapObj","start","cwd","process","rootFolder","basename","hasOwnProperty","Error","Object","keys","checkGitRepo","includes","runCmdSync","getCmdStr","split","map","ele","trim","filter","Boolean","forEach","LK_C_path","resolve","existsSync","console","log","cmd","option","execSync","rootDir","gitUrl"],"mappings":";AAAA,MAAMA,EAAeC,QAAQ,iBACvBC,EAAKD,QAAQ,MACbE,EAAOF,QAAQ,QAEfG,EAAa,CACT,OAAA,0CACA,OAAA,0CACA,OAAA,0CACA,KAAA,0CACA,OAAA,2CAKV,SAASC,IACDC,MAAAA,EAAMC,QAAQD,MACdE,EAAaL,EAAKM,SAASH,GAE7B,IAACF,EAAWM,eAAeF,GACvB,MAAA,IAAIG,SAASH,eAAwBI,OAAOC,KAAKT,MAEnD,IAACU,EAAaR,GACV,MAAA,IAAIK,SAASL,uBAWf,GARA,CAAC,OAAQ,QAAQS,SAASP,IAC5BQ,EAAY,2CAEdC,EAAUb,EAAWI,IAAaU,MAAM,MACrCC,IAAIC,GAAOA,EAAIC,QACfC,OAAOF,GAAOG,QAAQH,IACtBI,QAAQR,GAEP,CAAC,OAAQ,OAAQ,QAAQD,SAASP,GAAa,CAC3CiB,MAAAA,EAAYtB,EAAKuB,QAAQpB,EAAK,kBACjCJ,EAAGyB,WAAWF,IACfG,QAAQC,IAAI,iCAGezB,EAAW,QAIpC,wCACAoB,QAAQJ,IACRJ,EAAWI,EAAK,CACdd,IAAKmB,MAKbG,QAAQC,IAAI,8BAMlB,SAASb,EAAWc,EAAKC,EAAO,IAC9BH,QAAQC,IAAIC,GACZ9B,EAAagC,SAASF,EAAKC,GAG7B,SAASjB,EAAamB,GACb/B,OAAAA,EAAGyB,WAAWxB,EAAKuB,QAAQO,EAAS,SAG7C,SAAShB,EAAUiB,GACT,+EAEcA,8JA1DxBN,QAAQC,IAAI,kBACZxB","file":"initialPush.js","sourceRoot":"../bin","sourcesContent":["const childProcess = require('child_process')\nconst fs = require('fs')\nconst path = require('path')\n\nconst repoMapObj = {\n  'LK-S': 'https://github.com/TracelessLK/LK-S.git',\n  'LK-D': 'https://github.com/TracelessLK/LK-D.git',\n  'LK-M': 'https://github.com/TracelessLK/LK-M.git',\n  'LK_M': 'https://github.com/TracelessLK/LK-M.git',\n  'LK-C': 'https://github.com/TracelessLK/LK-C.git',\n}\nconsole.log('version: 0.0.1')\nstart()\n\nfunction start() {\n  const cwd = process.cwd()\n  const rootFolder = path.basename(cwd)\n\n  if (!repoMapObj.hasOwnProperty(rootFolder)) {\n    throw new Error(`${rootFolder} is not in ${Object.keys(repoMapObj)}`)\n  } else {\n    if (!checkGitRepo(cwd)) {\n      throw new Error(`${cwd} is not a git repo`)\n    } else {\n      // LK-M has dev_z branch not dev\n      if (['LK-M', 'LK_M'].includes(rootFolder)){\n        runCmdSync(`git checkout dev_z && git branch -m dev`)\n      }\n      getCmdStr(repoMapObj[rootFolder]).split('\\n')\n        .map(ele => ele.trim())\n        .filter(ele => Boolean(ele))\n        .forEach(runCmdSync)\n      // process LK-C in submodule\n      if (['LK-M', 'LK-D', 'LK_M'].includes(rootFolder)) {\n        const LK_C_path = path.resolve(cwd, 'submodule/LK-C')\n        if(fs.existsSync(LK_C_path)) {\n          console.log('working on LK-C in submodule')\n          [\n            'git remote rename origin origin-deprecated',\n            `git remote add origin ${repoMapObj['LK-C']}`,\n            'git pull origin',\n            'git branch -u origin/dev dev',\n            'git checkout dev',\n            'git remote remove origin-deprecated'\n          ].forEach(ele => {\n            runCmdSync(ele, {\n              cwd: LK_C_path\n            })\n          })\n        }\n      }\n      console.log('initial push successfully ')\n    }\n  }\n}\n\n\nfunction runCmdSync(cmd, option={}) {\n  console.log(cmd)\n  childProcess.execSync(cmd, option)\n}\n\nfunction checkGitRepo(rootDir) {\n  return fs.existsSync(path.resolve(rootDir, '.git'))\n}\n\nfunction getCmdStr(gitUrl) {\n  return `\n  git remote rename origin origin-deprecated\ngit remote add origin ${gitUrl}\ngit push --force origin master:master\ngit push --force origin dev:dev\ngit push --force origin publish:publish\ngit remote remove origin-deprecated\n  `\n}\n"]}